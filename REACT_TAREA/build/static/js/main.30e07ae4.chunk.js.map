{"version":3,"sources":["componentes/Cargando.js","variables/variables.js","paginas/clientes/componentes/ClienteFila.js","paginas/clientes/componentes/ClientesTabla.js","paginas/clientes/componentes/ClienteForm.js","paginas/clientes/Clientes.js","paginas/pedidos/componentes/PedidoFila.js","paginas/pedidos/componentes/PedidoTabla.js","servicios/RepartidorService.js","servicios/ClienteService.js","servicios/ProductosService.js","paginas/pedidos/componentes/PedidoForm.js","paginas/pedidos/Pedidos.js","paginas/repartidores/componentes/RepartidorFila.js","paginas/repartidores/componentes/RepartidoresTabla.js","paginas/repartidores/componentes/RepartidorFormV2.js","paginas/repartidores/Repartidores.js","paginas/productos/componentes/ProductoFila.js","paginas/productos/componentes/ProductoTabla.js","paginas/productos/componentes/ProductoForm.js","paginas/productos/Productos.js","paginas/home/Home.js","componentes/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cargando","tipo","texto","claseAlerta","className","role","URL_BACKEND","ClienteFila","cliente","numero","setObjCliente","useState","checked","setChecked","useEffect","cli_est","id","cli_nom","cli_ape","onChange","nuevoCliente","console","log","endpoint","fetch","method","headers","body","JSON","stringify","then","response","json","data","cli_dni","onClick","ClientesTabla","clientes","map","i","key","ClienteForm","getClientes","objCliente","formVacio","formulario","setFormulario","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Swal","fire","icon","title","text","showCancelButton","result","timer","putCliente","postCliente","htmlFor","type","Clientes","cargando","setCargando","setClientes","PedidoFila","pedido","productos","repartidores","setObjPedido","ped_est","prod","id_pro","pro_nom","repa","id_rep","rep_nom","clie","id_cli","ped_ini","ped_fin","nuevoPedido","ped_fecha","PedidoTabla","pedidos","RepartidorService","Promise","resolve","reject","ClienteService","this","ProductoService","formularioVacio","PedidoForm","getPedidos","objPedido","setRepartidores","setProductos","repService","cliService","prodService","llenarSelects","a","getAllRepartidores","getAllClientes","getAllProductos","putPedido","postPedido","producto","pro_precio","repartidor","rep_ape","Pedidos","setPedidos","repartidores2","clientes2","productos2","RepartidorFila","setObjRepartidor","rep_est","nuevoRepartidor","rep_dni","RepartidoresTabla","RepartidorFormV2","getRepartidores","objRepartidor","putRepartidor","postRepartidor","Repartidores","ProductoFila","setObjProducto","pro_est","nuevoProducto","pro_img","ProductoTabla","ProductoForm","getProductos","objProducto","putProducto","postProducto","Productos","objProductos","setObjProductos","Home","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2NAiCeA,EA/BE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAErBC,EAAc,GAClB,OAAQF,GACP,IAAK,UACJE,EAAc,kCACd,MACD,IAAK,SACJA,EAAc,iCACd,MACD,IAAK,UACJA,EAAc,kCACd,MACD,IAAK,OACJA,EAAc,+BACd,MACD,QACCA,EAAc,gCAKhB,OACC,yBAAKC,UAAWD,EAAaE,KAAK,SACjC,wBAAID,UAAU,iBAAd,YACA,2BAAIF,GACJ,uBAAGE,UAAU,W,wBC3BHE,EAAW,8CCoFTC,EAjFK,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cAAoB,EAE1BC,oBAAS,GAFiB,mBAEjDC,EAFiD,KAExCC,EAFwC,KAoDxD,OAbAC,qBAAU,WACgB,SAApBN,EAAQO,SACVF,GAAW,KAEZ,IAUC,4BACF,4BAAKJ,GACL,4BAAKD,EAAQQ,IACb,4BAAKR,EAAQS,SACb,4BAAKT,EAAQU,SACb,4BAEIN,EACE,0BAAMR,UAAU,uBAAhB,cACA,0BAAMA,UAAU,sBAAhB,gBAEJ,kBAAC,IAAD,CACEQ,QAASA,EACTO,SA7Da,WAEjB,IAAIC,EAAY,eAAQZ,GAOxBY,EAAaL,SAAWH,EAAU,GAClCS,QAAQC,IAAIF,EAAaL,SAEzB,IAAMQ,EAAQ,UAAMjB,EAAN,oBAA6BE,EAAQQ,IACnDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUT,KACpBU,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBZ,QAAQC,IAAIW,GAOZpB,GAAYD,aAoChB,4BAAKJ,EAAQ0B,SACb,4BACE,4BAAQ9B,UAAU,eAAe+B,QAAS,WACxCzB,EAAcF,KADhB,aC5CO4B,EA5BO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAU3B,EAAoB,EAApBA,cAC/B,OACI,2BAAON,UAAU,kDACnB,+BACE,4BACE,4BAAI,sCACJ,kCACA,sCACA,wCACA,sCACA,mCACA,0CAGJ,+BAEIiC,EAASC,KAAI,SAAC9B,EAAS+B,GACrB,OAAO,kBAAC,EAAD,CAAa9B,OAAQ8B,EAC1B/B,QAASA,EACTgC,IAAKhC,EAAQQ,GACbN,cAAeA,U,wBC0Kd+B,EA7LK,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,WAAYjC,EAAoB,EAApBA,cAGxCkC,EAAY,CACZ3B,QAAS,GACTC,QAAS,GACTH,QAAS,GACTmB,QAAS,IAPmD,EAY1BvB,mBAAS,IAZiB,mBAYvDkC,EAZuD,KAY3CC,EAZ2C,KAc9DhC,qBAAU,WACRO,QAAQC,IAAI,qBAEVwB,EADEH,GAGYC,KAEf,CAACD,IAEJtB,QAAQC,IAAI,aAAcuB,GAI1B,IAAME,EAAe,SAACC,GACpBF,EAAc,2BAAKD,GAAN,kBAAmBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAoG7D,OACI,yBAAK/C,UAAU,QACf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,sBAEF,yBAAKA,UAAU,aACb,0BAAMA,UAAU,MAAMgD,SA9DD,SAACJ,GACxBA,EAAEK,iBAEgC,KAA9BR,EAAW5B,QAAQqC,QACS,KAA9BT,EAAW3B,QAAQoC,QACW,KAA9BT,EAAWX,QAAQoB,QACW,KAA9BT,EAAW9B,QAAQuC,OACnBC,IAAKC,KAAK,CACRC,KAAM,QACNC,MAAO,WACPC,KAAM,wCAGJhB,EAGFY,IAAKC,KAAK,CACRE,MAAO,2CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,gCA3CH,SAACF,GAClB,IAAMG,EAAQ,UAAMjB,EAAN,oBAA6BqC,EAAW3B,IACtDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUT,KACpBU,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,eACPC,KAAM,qCACNF,KAAM,UACNK,MAAO,OAGTpB,IACAhC,EAAc,YA4BVqD,CAAWlB,OAKfU,IAAKC,KAAK,CACRE,MAAO,0CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,+BA7EF,SAACF,GACnB,IAAMG,EAAQ,UAAMjB,EAAN,YACdkB,MAAMD,EAAU,CACdE,OAAQ,OACRE,KAAMC,KAAKC,UAAUT,GACrBM,QAAS,CACP,eAAgB,sBAEjBI,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,YACPD,KAAM,UACNE,KAAM,6DACNG,MAAO,MAETpB,UAgEIsB,CAAYnB,SAwBhB,yBAAKzC,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACVe,SAAU4B,EACVI,MAAON,EAAW5B,WAEtB,yBAAKb,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,aACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eAAee,SAAU4B,EACnCI,MAAON,EAAW3B,WAGtB,yBAAKd,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,4BAAQ7D,UAAU,eAAe8C,KAAK,UACpC/B,SAAU4B,EACVI,MAAON,EAAW9B,SAClB,4BAAQoC,MAAM,IAAd,gBACA,4BAAQA,MAAM,QAAd,cACA,4BAAQA,MAAM,SAAd,kBAGJ,yBAAK/C,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,QACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACV+C,MAAON,EAAWX,QAClBf,SAAU4B,KAGd,yBAAK3C,UAAU,uBAEXuC,EACE,4BAAQvC,UAAU,4BAA4B8D,KAAK,UAAnD,sBAGA,4BAAQ9D,UAAU,4BAA4B8D,KAAK,UAAnD,kBAKN,yBAAK9D,UAAU,uBACb,4BAAQA,UAAU,2BAA2B8D,KAAK,UAAlD,iBCnGCC,EAzEE,WAEb,IAFmB,EAGaxD,oBAAS,GAHtB,mBAGZyD,EAHY,KAGFC,EAHE,OAIa1D,mBAAS,IAJtB,mBAIZ0B,EAJY,KAIFiC,EAJE,OAKiB3D,mBAAS,MAL1B,mBAKZgC,EALY,KAKAjC,EALA,KAQbgC,EAAc,WAQX0B,GACHC,GAAY,GAGd7C,MAlBa,uDAkBGM,MAAK,SAACC,GACpBA,EAASC,OAAOF,MAAK,SAACG,GACpBoC,GAAY,GACZC,EAAYrC,UAsBvB,OAjBKnB,qBAAU,WACR4B,MACC,IAgBL,kBAAC,WAAD,KACA,yBAAKtC,UAAU,8BACb,yBAAKA,UAAU,YACZ,kBAAC,EAAD,CACCsC,YAAaA,EACbC,WAAYA,EACZjC,cAAeA,MAKrB,yBAAKN,UAAU,8BACb,yBAAKA,UAAU,aAEE,IAAbgE,EACE,kBAAC,EAAD,CAAUnE,KAAK,OAAOC,MAAM,sBAC5B,kBAAC,EAAD,CACAmC,SAAUA,EACR3B,cAAeA,Q,wBCiCd6D,EAtGI,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,OAAQC,EAA8D,EAA9DA,UAAWC,EAAmD,EAAnDA,aAAcrC,EAAqC,EAArCA,SAAU5B,EAA2B,EAA3BA,OAAQkE,EAAmB,EAAnBA,aAAmB,EAE1DhE,oBAAS,GAFiD,mBAEjFC,EAFiF,KAExEC,EAFwE,KAkCxF,OARAC,qBAAU,WACiB,SAAnB0D,EAAOI,SACP/D,GAAW,KAGhB,IAEPQ,QAAQC,IAAIkD,GAEJ,4BACI,4BAAK/D,GACL,4BAAK+D,EAAOxD,IACZ,4BACIyD,EAAUnC,KAAI,SAACuC,EAAMtC,GACjB,GAAIiC,EAAOM,QAAUD,EAAK7D,GAEtB,OAAQ6D,EAAKE,YAcrC,4BACgBL,EAAapC,KAAI,SAAC0C,EAAMzC,GACpB,GAAIiC,EAAOS,QAAUD,EAAKhE,GAEtB,OAAQgE,EAAKE,YAMzB,4BACI7C,EAASC,KAAI,SAAC6C,EAAM5C,GAChB,GAAIiC,EAAOY,QAAUD,EAAKnE,GAEtB,OAAQmE,EAAKlE,YAOzB,4BAAKuD,EAAOa,SACZ,4BAAKb,EAAOc,SACZ,4BAEQ1E,EACI,0BAAMR,UAAU,uBAAhB,cACA,0BAAMA,UAAU,sBAAhB,gBAER,kBAAC,IAAD,CACIQ,QAASA,EACTO,SAnFE,WAEd,IAAIoE,EAAW,eAAQf,GAEvBe,EAAYX,SAAWhE,EAAU,GACjCS,QAAQC,IAAIiE,EAAYX,SAExB,IAAMrD,EAAQ,UAAMjB,EAAN,mBAA4BkE,EAAOxD,IACjDQ,MAAMD,EAAU,CACZE,OAAQ,MACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU0D,KACtBzD,MAAK,SAACC,GACLA,EAASC,OAAOF,MAAK,SAACG,GAClBZ,QAAQC,IAAIW,GACZpB,GAAYD,aAqEhB,4BAAK4D,EAAOgB,WACZ,4BACI,4BAAQpF,UAAU,eAAe+B,QAAS,WACtCwC,EAAaH,KADjB,aC1DDiB,EAtCK,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,QAAQjB,EAAoD,EAApDA,UAAUC,EAA0C,EAA1CA,aAAarC,EAA6B,EAA7BA,SAAUsC,EAAmB,EAAnBA,aAE5D,OACI,2BAAOvE,UAAU,kDACnB,+BACE,4BACE,4BAAI,sCACJ,kCACA,wCACA,0CACA,uCACA,6CACA,0CACA,sCACA,4CACA,0CAGJ,+BAEIsF,EAAQpD,KAAI,SAACkC,EAAQjC,GAGnB,OAAO,kBAAC,EAAD,CAAY9B,OAAQ8B,EAC3BiC,OAAQA,EACRC,UAAWA,EACXC,aAAcA,EACdrC,SAAUA,EAERG,IAAKgC,EAAOxD,GACZ2D,aAAcA,U,gBC7BfgB,EAAb,iDACCpE,SAAW,cADZ,iEAKuB,IAAD,OACpB,OAAO,IAAIqE,SAAQ,SAACC,EAASC,GAC5BtE,MAAM,GAAD,OAAIlB,GAAJ,OAAkB,EAAKiB,WAC1BO,MAAK,SAACC,GACNA,EAASC,OAAOF,MAAK,SAAC4C,GACrBmB,EAAQnB,gBAVd,KCDaqB,EAAb,iDACCxE,SAAW,WADZ,+LAGuBC,MAAM,GAAD,OAAIlB,GAAJ,OAAkB0F,KAAKzE,WAHnD,cAGMQ,EAHN,gBAIuBA,EAASC,OAJhC,cAIMK,EAJN,yBAOSA,GAPT,6GCAa4D,EAAb,iDACC1E,SAAW,YADZ,gMAGuBC,MAAM,GAAD,OAAIlB,GAAJ,OAAkB0F,KAAKzE,WAHnD,cAGMQ,EAHN,gBAIwBA,EAASC,OAJjC,cAIMyC,EAJN,yBAKSA,GALT,6GCKMyB,EAAkB,CACtBpB,OAAQ,GACRG,OAAQ,GACRG,OAAQ,GACRC,QAAS,GACTC,QAAS,GACTV,QAAS,GACTY,UAAW,IA0TEW,EAvTI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,UAAW1B,EAAmB,EAAnBA,aAAmB,EAE1BhE,mBAASuF,GAFiB,mBAEvDrD,EAFuD,KAE3CC,EAF2C,OAGtBnC,mBAAS,IAHa,mBAGvD+D,EAHuD,KAGzC4B,EAHyC,OAI9B3F,mBAAS,IAJqB,mBAIvD0B,EAJuD,KAI7CiC,EAJ6C,OAK5B3D,mBAAS,IALmB,mBAKvD8D,EALuD,KAK5C8B,EAL4C,KAO1DC,EAAa,IAAIb,EACjBc,EAAa,IAAIV,EACjBW,EAAc,IAAIT,EAEhBlD,EAAe,SAACC,GACpBF,EAAc,2BACTD,GADQ,kBAEVG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAKxBwD,EAAa,uCAAG,sBAAAC,EAAA,kEAEpBN,EAFoB,SAEEE,EAAWK,qBAFb,8CAGpBvC,EAHoB,SAGFmC,EAAWK,iBAHT,8CAIpBP,EAJoB,UAIDG,EAAYK,kBAJX,+EAAH,qDAcnBjG,qBAAU,WAER6F,MAEC,IAsBH7F,qBAAU,WACRO,QAAQC,IAAI,oBAEVwB,EADEuD,GAGYH,KAEf,CAACG,IAEJhF,QAAQC,IAAI,aAAcuB,GA8H1B,OACE,yBAAKzC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,0BAEF,yBAAKA,UAAU,aACb,0BAAMA,UAAU,MAAMgD,SArFP,SAACJ,GACxBA,EAAEK,iBAE+B,KAA7BR,EAAWiC,OAAOxB,QACS,KAA7BT,EAAWoC,OAAO3B,QACW,KAA7BT,EAAWuC,OAAO9B,QACY,KAA9BT,EAAWwC,QAAQ/B,QACW,KAA9BT,EAAWyC,QAAQhC,QACW,KAA9BT,EAAW+B,QAAQtB,QACa,KAAhCT,EAAW2C,UAAUlC,OAErBC,IAAKC,KAAK,CACRC,KAAM,QACNC,MAAO,WACPC,KAAM,wCAGJ0C,EAGF9C,IAAKC,KAAK,CACRE,MAAO,2CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,+BA/CJ,SAACiE,GACjB,IAAMhE,EAAQ,UAAMjB,EAAN,mBAA4B+F,EAAUrF,IACpDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU0D,KACpBzD,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,eACPC,KAAM,qCACNF,KAAM,UACNK,MAAO,OAGTsC,IACAzB,EAAa,YAgCTqC,CAAUnE,OAKdU,IAAKC,KAAK,CACRE,MAAO,0CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,+BAjFH,SAACiE,GAClB,IAAMhE,EAAQ,UAAMjB,EAAN,WACdkB,MAAMD,EAAU,CACdE,OAAQ,OACRE,KAAMC,KAAKC,UAAU0D,GACrB7D,QAAS,CACP,eAAgB,sBAEjBI,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,YACPD,KAAM,UACNE,KAAM,4DACNG,MAAO,MAETsC,UAoEIa,CAAWpE,SA2CT,yBAAKzC,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,uBACA,4BAAQf,KAAK,SACX/B,SAAU4B,EAAcI,MAAON,EAAWiC,OAC1C9D,GAAG,GAAGZ,UAAU,gBACd,4BAAQ+C,MAAM,IAAd,cAEAsB,EAAUnC,KAAI,SAAC4E,GACb,OAAQ,4BAAQ/D,MAAO+D,EAASlG,GAAIwB,IAAK0E,EAASlG,IAC/CkG,EAASnC,QADJ,OACiBmC,EAASC,iBAM1C,yBAAK/G,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,yBACA,4BAAQf,KAAK,SACX/B,SAAU4B,EAAcI,MAAON,EAAWoC,OAC1CjE,GAAG,GAAGZ,UAAU,gBAClC,4BAAQ+C,MAAM,IAAd,cAEoBuB,EAAapC,KAAI,SAAC8E,GAChB,OAAQ,4BAAQjE,MAAOiE,EAAWpG,GAAIwB,IAAK4E,EAAWpG,IACnDoG,EAAWlC,QADN,IACgBkC,EAAWC,cAQ3C,yBAAKjH,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,sBACA,4BAAQf,KAAK,SACX/B,SAAU4B,EACVI,MAAON,EAAWuC,OAClBpE,GAAG,GAAGZ,UAAU,gBACd,4BAAQ+C,MAAM,IAAd,cAEAd,EAASC,KAAI,SAAC9B,GACZ,OAAQ,4BAAQ2C,MAAO3C,EAAQQ,GAAIwB,IAAKhC,EAAQQ,IAC7CR,EAAQS,QADH,IACaT,EAAQU,cAMrC,yBAAKd,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,kBACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB/B,SAAU4B,EAAcI,MAAON,EAAWwC,QAC1CjF,UAAU,kBAEd,yBAAKA,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,eACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB/B,SAAU4B,EAAcI,MAAON,EAAWyC,QAC1ClF,UAAU,kBAEd,yBAAKA,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,UACA,4BAAQf,KAAK,UAAU/B,SAAU4B,EAC/B/B,GAAG,GAAGZ,UAAU,eAAe+C,MAAON,EAAW+B,SACjD,4BAAQzB,MAAM,IAAd,cACA,4BAAQA,MAAM,QAAd,cACJ,4BAAQA,MAAM,SAAd,kBAGA,yBAAK/C,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,SACA,2BAAOC,KAAK,OAAOhB,KAAK,YACtB/B,SAAU4B,EAAcI,MAAON,EAAW2C,UAC1CpF,UAAU,kBAGd,yBAAKA,UAAU,uBAEfiG,EACE,4BAAQjG,UAAU,4BAA4B8D,KAAK,UAAnD,qBAGA,4BAAQ9D,UAAU,4BAA4B8D,KAAK,UAAnD,iBAKN,yBAAK9D,UAAU,uBACb,4BAAQA,UAAU,2BAA2B8D,KAAK,UAAlD,mBC5MGoD,EA5FC,WAEZ,IAFkB,EAGc3G,oBAAS,GAHvB,mBAGXyD,EAHW,KAGDC,EAHC,OAIY1D,mBAAS,IAJrB,mBAIX+E,EAJW,KAIF6B,EAJE,OAKgB5G,mBAAS,MALzB,mBAKX0F,EALW,KAKA1B,EALA,OAOuBhE,mBAAS,IAPhC,mBAOX6G,EAPW,KAOIlB,EAPJ,OAQe3F,mBAAS,IARxB,mBAQX8G,EARW,KAQAnD,EARA,OASiB3D,mBAAS,IAT1B,mBASX+G,EATW,KASCnB,EATD,KAcdC,EAAa,IAAIb,EACjBc,EAAa,IAAIV,EACjBW,EAAc,IAAIT,EAGhBG,EAAa,WACZhC,GACHC,GAAY,GAGd7C,MAtBe,sDAsBCM,MAAK,SAACC,GACpBA,EAASC,OAAOF,MAAK,SAACG,GACpBoC,GAAY,GACZkD,EAAWtF,UAKX0E,EAAa,uCAAG,sBAAAC,EAAA,kEAEpBN,EAFoB,SAEEE,EAAWK,qBAFb,8CAGpBvC,EAHoB,SAGFmC,EAAWK,iBAHT,8CAIpBP,EAJoB,UAIDG,EAAYK,kBAJX,+EAAH,qDA0BtB,OAlBKjG,qBAAU,WACRsF,IACAO,MACC,IAgBP,kBAAC,WAAD,KAEE,yBAAKvG,UAAU,8BACb,yBAAKA,UAAU,YACZ,kBAAC,EAAD,CACCgG,WAAYA,EACZC,UAAWA,EACX1B,aAAcA,MAKpB,yBAAKvE,UAAU,8BACb,yBAAKA,UAAU,aAEE,IAAbgE,EACE,kBAAC,EAAD,CAAUnE,KAAK,OAAOC,MAAM,qBAC5B,kBAAC,EAAD,CACAwF,QAASA,EACTjB,UAAWiD,EACXhD,aAAc8C,EACdnF,SAAUoF,EAER9C,aAAcA,QCbbgD,EA3EQ,SAAC,GAA8C,IAA5CP,EAA2C,EAA3CA,WAAY3G,EAA+B,EAA/BA,OAAQmH,EAAuB,EAAvBA,iBAAuB,EAErCjH,oBAAS,GAF4B,mBAE5DC,EAF4D,KAEnDC,EAFmD,KA8CnE,OAPAC,qBAAU,WACmB,SAAvBsG,EAAWS,SACbhH,GAAW,KAEZ,IAID,4BACE,4BAAKJ,GACL,4BAAK2G,EAAWpG,IAChB,4BAAKoG,EAAWlC,SAChB,4BAAKkC,EAAWC,SAChB,4BAEIzG,EACE,0BAAMR,UAAU,uBAAhB,cACA,0BAAMA,UAAU,sBAAhB,gBAEJ,kBAAC,IAAD,CACEQ,QAASA,EACTO,SAvDc,WAEpB,IAAI2G,EAAe,eAAQV,GAO3BU,EAAgBD,SAAWjH,EAAU,GACrCS,QAAQC,IAAIwG,EAAgBD,SAE5B,IAAMtG,EAAQ,UAAMjB,EAAN,uBAAgC8G,EAAWpG,IACzDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUiG,KACpBhG,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBZ,QAAQC,IAAIW,GAOZpB,GAAYD,aA8Bd,4BAAKwG,EAAWW,SAChB,4BACE,4BAAQ3H,UAAU,eAAe+B,QAAS,WACxCyF,EAAiBR,KADnB,aCxCOY,EA5BW,SAAC,GAAwC,IAAtCtD,EAAqC,EAArCA,aAAckD,EAAuB,EAAvBA,iBACzC,OACE,2BAAOxH,UAAU,kDACf,+BACE,4BACE,4BAAI,sCACJ,kCACA,sCACA,wCACA,sCACA,mCACA,0CAGJ,+BAEIsE,EAAapC,KAAI,SAAC8E,EAAY7E,GAC5B,OAAO,kBAAC,EAAD,CAAgB9B,OAAQ8B,EAC7B6E,WAAYA,EACZ5E,IAAK4E,EAAWpG,GAChB4G,iBAAkBA,UCiKjBK,EApLU,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,gBAAiBC,EAAsC,EAAtCA,cAAeP,EAAuB,EAAvBA,iBAEtDhF,EAAY,CACdsC,QAAS,GACTmC,QAAS,GACTQ,QAAS,GACTE,QAAS,IANsE,EAW7CpH,mBAAS,IAXoC,mBAW1EkC,EAX0E,KAW9DC,EAX8D,KAajFhC,qBAAU,WACRO,QAAQC,IAAI,wBAEVwB,EADEqF,GAGYvF,KAEf,CAACuF,IAEJ9G,QAAQC,IAAI,aAAcuB,GAI1B,IAAME,EAAe,SAACC,GACpBF,EAAc,2BAAKD,GAAN,kBAAmBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UA4F3D,OACE,yBAAK/C,UAAU,QACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,yBAEF,yBAAKA,UAAU,aACb,0BAAMA,UAAU,MAAMgD,SAtDH,SAACJ,GACxBA,EAAEK,iBAEgC,KAA9BR,EAAWqC,QAAQ5B,QACS,KAA9BT,EAAWwE,QAAQ/D,QACW,KAA9BT,EAAWkF,QAAQzE,QACW,KAA9BT,EAAWgF,QAAQvE,OACnBC,IAAKC,KAAK,CACRC,KAAM,QACNC,MAAO,WACPC,KAAM,wCAGJwE,EAGF5E,IAAKC,KAAK,CACRE,MAAO,2CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,mCA3CA,SAACwG,GACrB,IAAMvG,EAAQ,UAAMjB,EAAN,uBAAgC6H,EAAcnH,IAC5DQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUiG,KACpBhG,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,eACPC,KAAM,qCACNF,KAAM,UACNK,MAAO,OAGToE,IACAN,EAAiB,YA4BbQ,CAAcvF,OAKlBU,IAAKC,KAAK,CACRE,MAAO,0CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,+BA7EC,SAACwG,GACtB,IAAMvG,EAAQ,UAAMjB,EAAN,eACdkB,MAAMD,EAAU,CACdE,OAAQ,OACRE,KAAMC,KAAKC,UAAUiG,GACrBpG,QAAS,CACP,eAAgB,sBAEjBI,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,YACPD,KAAM,UACNE,KAAM,gEACNG,MAAO,MAEToE,UAgEIG,CAAexF,SAgBjB,yBAAKzC,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACVe,SAAU4B,EACVI,MAAON,EAAWqC,WAEtB,yBAAK9E,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,aACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eAAee,SAAU4B,EACnCI,MAAON,EAAWwE,WAGtB,yBAAKjH,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,4BAAQ7D,UAAU,eAAe8C,KAAK,UACpC/B,SAAU4B,EACVI,MAAON,EAAWgF,SAClB,4BAAQ1E,MAAM,IAAd,gBACA,4BAAQA,MAAM,QAAd,cACA,4BAAQA,MAAM,SAAd,kBAGJ,yBAAK/C,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,QACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACV+C,MAAON,EAAWkF,QAClB5G,SAAU4B,KAGd,yBAAK3C,UAAU,uBAEX+H,EACE,4BAAQ/H,UAAU,4BAA4B8D,KAAK,UAAnD,yBAGA,4BAAQ9D,UAAU,4BAA4B8D,KAAK,UAAnD,qBAKN,yBAAK9D,UAAU,uBACb,4BAAQA,UAAU,2BAA2B8D,KAAK,UAAlD,iBC3GGoE,EA7DM,WAEnB,IAFyB,EAGO3H,oBAAS,GAHhB,mBAGlByD,EAHkB,KAGRC,EAHQ,OAIe1D,mBAAS,IAJxB,mBAIlB+D,EAJkB,KAIJ4B,EAJI,OASiB3F,mBAAS,MAT1B,mBASlBwH,EATkB,KASHP,EATG,KAWnBM,EAAkB,WACjB9D,GACHC,GAAY,GAGd7C,MAde,0DAcCM,MAAK,SAACC,GACpBA,EAASC,OAAOF,MAAK,SAACG,GACpBoC,GAAY,GACZiC,EAAgBrE,UAStB,OAJAnB,qBAAU,WACRoH,MACC,IAGD,kBAAC,WAAD,KACE,yBAAK9H,UAAU,8BACb,yBAAKA,UAAU,YAMb,kBAAC,EAAD,CACE8H,gBAAiBA,EACjBC,cAAeA,EACfP,iBAAkBA,MAKxB,yBAAKxH,UAAU,8BACb,yBAAKA,UAAU,aAEE,IAAbgE,EACE,kBAAC,EAAD,CAAUnE,KAAK,OAAOC,MAAM,0BAC5B,kBAAC,EAAD,CACEwE,aAAcA,EACdkD,iBAAkBA,QC2BnBW,EAlFM,SAAC,GAA0C,IAAxCrB,EAAuC,EAAvCA,SAAUzG,EAA6B,EAA7BA,OAAQ+H,EAAqB,EAArBA,eAAqB,EAE7B7H,oBAAS,GAFoB,mBAEpDC,EAFoD,KAE3CC,EAF2C,KAqD3D,OAdAC,qBAAU,WACiB,SAArBoG,EAASuB,SACX5H,GAAW,KAEZ,IAWC,4BACF,4BAAKJ,GACL,4BAAKyG,EAASlG,IACd,4BAAKkG,EAASnC,SACd,4BAAKmC,EAASC,YACd,4BAEIvG,EACE,0BAAMR,UAAU,uBAAhB,cACA,0BAAMA,UAAU,sBAAhB,gBAEJ,kBAAC,IAAD,CACEQ,QAASA,EACTO,SA9Dc,WAElB,IAAIuH,EAAa,eAAQxB,GAOzBwB,EAAcD,SAAW7H,EAAU,GACnCS,QAAQC,IAAIoH,EAAcD,SAE1B,IAAMlH,EAAQ,UAAMjB,EAAN,qBAA8B4G,EAASlG,IACrDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU6G,KACpB5G,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBZ,QAAQC,IAAIW,GAOZpB,GAAYD,aAqChB,4BAAKsG,EAASyB,SACd,4BACE,4BAAQvI,UAAU,eAAe+B,QAAS,WACxCqG,EAAetB,KADjB,aC5CO0B,EA5BO,SAAC,GAAmC,IAAjCnE,EAAgC,EAAhCA,UAAW+D,EAAqB,EAArBA,eAChC,OACI,2BAAOpI,UAAU,kDACjB,+BACE,4BACE,4BAAI,sCACJ,kCACA,sCACA,sCACA,sCACA,sCACA,0CAGJ,+BAEIqE,EAAUnC,KAAI,SAAC4E,EAAU3E,GACvB,OAAO,kBAAC,EAAD,CAAc9B,OAAQ8B,EAC7B2E,SAAUA,EACR1E,IAAK0E,EAASlG,GACdwH,eAAgBA,UCwKjBK,EA3LM,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,YAAaP,EAAqB,EAArBA,eAG3C5F,EAAY,CACZmC,QAAS,GACToC,WAAY,GACZsB,QAAS,GACTE,QAAS,IAPuD,EAY9BhI,mBAAS,IAZqB,mBAY3DkC,EAZ2D,KAY/CC,EAZ+C,KAclEhC,qBAAU,WACRO,QAAQC,IAAI,sBAEVwB,EADEiG,GAGYnG,KAEf,CAACmG,IAEJ1H,QAAQC,IAAI,aAAcuB,GAI1B,IAAME,EAAe,SAACC,GACpBF,EAAc,2BAAKD,GAAN,kBAAmBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAkG7D,OACI,yBAAK/C,UAAU,QACf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,uBAEF,yBAAKA,UAAU,aACb,0BAAMA,UAAU,MAAMgD,SA5DD,SAACJ,GACxBA,EAAEK,iBAEgC,KAA9BR,EAAWkC,QAAQzB,QACY,KAAjCT,EAAWsE,WAAW7D,QACQ,KAA9BT,EAAW8F,QAAQrF,QACW,KAA9BT,EAAW4F,QAAQnF,OACnBC,IAAKC,KAAK,CACRC,KAAM,QACNC,MAAO,WACPC,KAAM,wCAGJoF,EAGFxF,IAAKC,KAAK,CACRE,MAAO,2CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,iCA3CF,SAACoH,GACnB,IAAMnH,EAAQ,UAAMjB,EAAN,qBAA8ByI,EAAY/H,IACxDQ,MAAMD,EAAU,CACdE,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU6G,KACpB5G,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,eACPC,KAAM,qCACNF,KAAM,UACNK,MAAO,OAGTgF,IACAN,EAAe,YA4BXQ,CAAYnG,OAKhBU,IAAKC,KAAK,CACRE,MAAO,0CACPD,KAAM,OACNE,KAAM,+DACNC,kBAAkB,IACjB9B,MAAK,SAAC+B,GACHA,EAAOV,QACT9B,QAAQC,IAAI,+BA7ED,SAACoH,GACpB,IAAMnH,EAAQ,UAAMjB,EAAN,aACdkB,MAAMD,EAAU,CACdE,OAAQ,OACRE,KAAMC,KAAKC,UAAU6G,GACrBhH,QAAS,CACP,eAAgB,sBAEjBI,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACG,GACpBsB,IAAKC,KAAK,CACRE,MAAO,YACPD,KAAM,UACNE,KAAM,8DACNG,MAAO,MAETgF,UAgEIG,CAAapG,SAsBjB,yBAAKzC,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACVe,SAAU4B,EACVI,MAAON,EAAWkC,WAEtB,yBAAK3E,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,2BAAOC,KAAK,OAAOhB,KAAK,aACtB9C,UAAU,eAAee,SAAU4B,EACnCI,MAAON,EAAWsE,cAGtB,yBAAK/G,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,4BAAQ7D,UAAU,eAAe8C,KAAK,UACpC/B,SAAU4B,EACVI,MAAON,EAAW4F,SAClB,4BAAQtF,MAAM,IAAd,gBACA,4BAAQA,MAAM,QAAd,cACA,4BAAQA,MAAM,SAAd,kBAGJ,yBAAK/C,UAAU,uBACb,2BAAO6D,QAAQ,IAAf,WACA,2BAAOC,KAAK,OAAOhB,KAAK,UACtB9C,UAAU,eACV+C,MAAON,EAAW8F,QAClBxH,SAAU4B,KAGd,yBAAK3C,UAAU,uBAEX2I,EACE,4BAAQ3I,UAAU,4BAA4B8D,KAAK,UAAnD,uBAGA,4BAAQ9D,UAAU,4BAA4B8D,KAAK,UAAnD,mBAKN,yBAAK9D,UAAU,uBACb,4BAAQA,UAAU,2BAA2B8D,KAAK,UAAlD,iBClHCgF,EA3DG,WAEd,IAFoB,EAGYvI,oBAAS,GAHrB,mBAGbyD,EAHa,KAGHC,EAHG,OAIc1D,mBAAS,IAJvB,mBAIb8D,EAJa,KAIF8B,EAJE,OAKoB5F,mBAAS,MAL7B,mBAKbwI,EALa,KAKCC,EALD,KAQdN,EAAe,WAEZ1E,GACHC,GAAY,GAGd7C,MAZa,wDAYGM,MAAK,SAACC,GACpBA,EAASC,OAAOF,MAAK,SAACG,GACpBoC,GAAY,GACZkC,EAAatE,UAcxB,OATKnB,qBAAU,WACRgI,MACC,IAQL,kBAAC,WAAD,KACA,yBAAK1I,UAAU,8BACb,yBAAKA,UAAU,YACZ,kBAAC,EAAD,CACC0I,aAAcA,EACdK,aAAcA,EACdC,gBAAiBA,MAKvB,yBAAKhJ,UAAU,8BACb,yBAAKA,UAAU,aAEE,IAAbgE,EACE,kBAAC,EAAD,CAAUnE,KAAK,OAAOC,MAAM,uBAC5B,kBAAC,EAAD,CACAuE,UAAWA,EACT2E,gBAAiBA,QChDhBC,EARF,WACZ,OACC,sCC+BaC,EAhCA,WACd,OACC,gCACC,yBAAKlJ,UAAU,iDACd,uBAAGA,UAAU,eAAemJ,KAAK,MAAjC,WACA,4BAAQnJ,UAAU,2BAA2B8D,KAAK,SAASsF,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAC/HC,gBAAc,QAAQC,aAAW,sBAClC,yBAAKxJ,UAAU,2BAA2BY,GAAG,oBAC5C,wBAAIZ,UAAU,mCACb,wBAAIA,UAAU,mBAEb,kBAAC,IAAD,CAAMyJ,GAAI,YAAazJ,UAAU,YAAjC,aAED,wBAAIA,UAAU,YAEb,kBAAC,IAAD,CAAMyJ,GAAI,aAAczJ,UAAU,YAAlC,cAED,wBAAIA,UAAU,YAEb,kBAAC,IAAD,CAAMyJ,GAAI,WAAYzJ,UAAU,YAAhC,YAED,wBAAIA,UAAU,YAEb,kBAAC,IAAD,CAAMyJ,GAAI,gBAAiBzJ,UAAU,YAArC,sBCQQ0J,MApBf,WACE,OACE,kBAAC,IAAD,KAEE,kBAAC,EAAD,MAEA,0BAAM1J,UAAU,wBACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2J,KAAM,YAAaC,UAAW7F,IACrC,kBAAC,IAAD,CAAO4F,KAAM,WAAYC,UAAW1C,IACpC,kBAAC,IAAD,CAAOyC,KAAM,gBAAiBC,UAAW1B,IACzC,kBAAC,IAAD,CAAOyB,KAAM,aAAcC,UAAWd,IACtC,kBAAC,IAAD,CAAOa,KAAM,IAAKC,UAAWX,QCdnBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/I,MAAK,SAAAgJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5J,QAAQ4J,MAAMA,EAAMC,c","file":"static/js/main.30e07ae4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cargando = ({ tipo, texto }) => {\r\n\r\n let claseAlerta = \"\";\r\n switch (tipo) {\r\n  case \"success\":\r\n   claseAlerta = \"alert alert-success text-center\";\r\n   break;\r\n  case \"danger\":\r\n   claseAlerta = \"alert alert-danger text-center\";\r\n   break;\r\n  case \"warning\":\r\n   claseAlerta = \"alert alert-warning text-center\";\r\n   break;\r\n  case \"info\":\r\n   claseAlerta = \"alert alert-info text-center\";\r\n   break;\r\n  default:\r\n   claseAlerta = \"alert alert-light text-center\";\r\n   break;\r\n }\r\n\r\n\r\n return (\r\n  <div className={claseAlerta} role=\"alert\">\r\n   <h4 className=\"alert-heading\">Cargando</h4>\r\n   <p>{texto}</p>\r\n   <p className=\"mb-0\"></p>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Cargando\r\n","// export const URL_BACKEND = `https://5ec86440155c130016a909c5.mockapi.io`;   //prosor\r\nexport const URL_BACKEND = `https://5ec9919a9ccbaf0016aa8f5d.mockapi.io`;//mio\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteFila = ({ cliente, numero, setObjCliente }) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    // funcion que se conecta a la BD y cambia el estado del cliente\r\n    const putCliente = () => {\r\n  \r\n      let nuevoCliente = { ...cliente };\r\n      // Al nuevo cliente le colocamos el estado contrario\r\n      // al que tiene en el componente actualmente,\r\n      // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n      // cli_est => mandamos la negacion del estado actual\r\n      // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n      // contemplando\r\n      nuevoCliente.cli_est = !checked + \"\";\r\n      console.log(nuevoCliente.cli_est);\r\n  \r\n      const endpoint = `${URL_BACKEND}/cliente/${cliente.id}`;\r\n      fetch(endpoint, {\r\n        method: 'PUT',\r\n        headers: {\r\n          \"Content-type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(nuevoCliente)\r\n      }).then((response) => {\r\n        response.json().then((data) => {\r\n          console.log(data);\r\n  \r\n          // AQUI NOS ASEGURAMOS DE QUE EL CLIENTE, HA CAMBIADO SU \r\n          // ESTADO EN LA BD\r\n          // En consecuencia, ya podemos hacer el cambio de estao local\r\n          // lo que generará un cambio visual para que el usuario\r\n          // vea el DOM actualizado.\r\n          setChecked(!checked);\r\n        })\r\n      })\r\n    }\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (cliente.cli_est === \"true\") {\r\n        setChecked(true);\r\n      }\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <tr>\r\n      <td>{numero}</td>\r\n      <td>{cliente.id}</td>\r\n      <td>{cliente.cli_nom}</td>\r\n      <td>{cliente.cli_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putCliente} />\r\n\r\n      </td>\r\n      <td>{cliente.cli_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjCliente(cliente);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default ClienteFila\r\n","import React from 'react'\r\nimport ClienteFila from './ClienteFila'\r\n//                    ARREGLO DE JSON DE LA API   ,   ARREGLO DE MODIFICACIONES QUE ENVIAREMOS\r\nconst ClientesTabla = ({ clientes, setObjCliente }) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          clientes.map((cliente, i) => {\r\n            return <ClienteFila numero={i}\r\n              cliente={cliente}\r\n              key={cliente.id}\r\n              setObjCliente={setObjCliente} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default ClientesTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ClienteForm = ({ getClientes, objCliente, setObjCliente }) => {\r\n\r\n\r\n    let formVacio = {\r\n        cli_nom: '',\r\n        cli_ape: '',\r\n        cli_est: '',\r\n        cli_dni: ''\r\n      };\r\n    \r\n    \r\n    \r\n      const [formulario, setFormulario] = useState({});\r\n    \r\n      useEffect(() => {\r\n        console.log(\"efecto objCliente\");\r\n        if (objCliente) {\r\n          setFormulario(objCliente);\r\n        } else {\r\n          setFormulario(formVacio)\r\n        }\r\n      }, [objCliente])\r\n    \r\n      console.log(\"state form\", formulario);\r\n    \r\n    \r\n    \r\n      const handleChange = (e) => {\r\n        setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n      }\r\n    \r\n      const postCliente = (nuevoCliente) => {\r\n        const endpoint = `${URL_BACKEND}/cliente`;\r\n        fetch(endpoint, {\r\n          method: 'POST',\r\n          body: JSON.stringify(nuevoCliente),\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          }\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: 'Éxito!',\r\n              icon: 'success',\r\n              text: 'El Cliente ha sido creado con éxito en la base de datos',\r\n              timer: 2000,\r\n            });\r\n            getClientes();\r\n          })\r\n        })\r\n      }\r\n      // Funcion que actualiza un cliente en la BD\r\n      const putCliente = (nuevoCliente) => {\r\n        const endpoint = `${URL_BACKEND}/cliente/${objCliente.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(nuevoCliente)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: \"Actualizado!\",\r\n              text: \"Registro actualizado correctamente\",\r\n              icon: \"success\",\r\n              timer: 1500\r\n            });\r\n            // limpiar el form\r\n            getClientes();\r\n            setObjCliente(null);\r\n          })\r\n        })\r\n      }\r\n      const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n    \r\n        if (formulario.cli_nom.trim() === \"\" ||\r\n          formulario.cli_ape.trim() === \"\" ||\r\n          formulario.cli_dni.trim() === \"\" ||\r\n          formulario.cli_est.trim() === \"\") {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Cuidado!\",\r\n            text: \"Todos los campos deben estar llenos\"\r\n          });\r\n        } else {\r\n          if (objCliente) {\r\n            // tengo editar el registro\r\n            // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n            Swal.fire({\r\n              title: '¿Seguro que desea editar el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS EDITAR AL Cliente\");\r\n                putCliente(formulario);\r\n              }\r\n            })\r\n          } else {\r\n            // tengo crear el registro\r\n            Swal.fire({\r\n              title: '¿Seguro que desea crear el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                // stuff PARA CREAR AL USUARIO\r\n                // aqui hacemos un POST  a mockapi\r\n                postCliente(formulario);\r\n              }\r\n            })\r\n          }\r\n        }\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <h3 className=\"card-title\">Registrar Cliente</h3>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form className=\"row\" onSubmit={enviarFormulario}>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Nombre:</label>\r\n              <input type=\"text\" name=\"cli_nom\"\r\n                className=\"form-control\"\r\n                onChange={handleChange}\r\n                value={formulario.cli_nom} />\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Apellido:</label>\r\n              <input type=\"text\" name=\"cli_ape\"\r\n                className=\"form-control\" onChange={handleChange}\r\n                value={formulario.cli_ape} />\r\n  \r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Estado:</label>\r\n              <select className=\"form-control\" name=\"cli_est\"\r\n                onChange={handleChange}\r\n                value={formulario.cli_est}>\r\n                <option value=\"\">-Seleccione-</option>\r\n                <option value=\"true\">Habilitado</option>\r\n                <option value=\"false\">Inhabilitado</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Dni:</label>\r\n              <input type=\"text\" name=\"cli_dni\"\r\n                className=\"form-control\"\r\n                value={formulario.cli_dni}\r\n                onChange={handleChange} />\r\n  \r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              {\r\n                objCliente ?\r\n                  <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                    Actualizar Cliente\r\n                  </button> :\r\n                  <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                    Crear Cliente\r\n                  </button>\r\n              }\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n                Cancelar\r\n        </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ClienteForm\r\n","\r\nimport React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ClientesTabla from './componentes/ClientesTabla';\r\n\r\nimport ClienteForm from './componentes/ClienteForm';\r\n\r\n\r\n\r\n\r\n\r\nconst Clientes = () => {\r\n\r\n    const endpoint = \"https://5ec9919a9ccbaf0016aa8f5d.mockapi.io/cliente\";\r\n    const [cargando, setCargando] = useState(true);//para cuando esperamos\r\n    const [clientes, setClientes] = useState([]);//nos traera el json de mockapi\r\n    const [objCliente, setObjCliente] = useState(null);//true cuando esta habilitado,false cuando no\r\n\r\n\r\n    const getClientes = () => {\r\n        //inicialmente esta en true osea cuando se carga por primera vez osea \r\n        //en la primera pasada este if no se cumple porlo que pasaria al fetch\r\n        //cuando setcargando tenga true significa que aparecera el cargando\r\n        //por lo tanto la primera vez que se carga ya esta en true asi que no es necesario ponerlo a true\r\n        //PERO LO QUE HACE ESTE IF ES QUE a los componentes como repartidorestabla o repartidoresfila\r\n        //se les pasa el state de setobjcleintes(INGRESAR CLIENTES) y este se encuentra aqui en la linea 8 osea que cuando cambia eso\r\n        //todo esto se renderizara entonces al pasar por el if cargando sera false\r\n        if (!cargando) {\r\n          setCargando(true);\r\n        }\r\n    \r\n        fetch(endpoint).then((response) => {\r\n          response.json().then((data) => {\r\n            setCargando(false);\r\n            setClientes(data);\r\n          })\r\n        })\r\n      }\r\n    \r\n      useEffect(() => {\r\n        getClientes();\r\n      }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n return (\r\n    <Fragment>\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n         <ClienteForm\r\n          getClientes={getClientes}\r\n          objCliente={objCliente}\r\n          setObjCliente={setObjCliente}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n        {\r\n          cargando === true ?\r\n            <Cargando tipo=\"info\" texto=\"Cargando clientes\" /> :\r\n            <ClientesTabla\r\n            clientes={clientes}\r\n              setObjCliente={setObjCliente}\r\n            />\r\n        }\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n )\r\n}\r\n\r\nexport default Clientes\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\n\r\n\r\nconst PedidoFila = ({ pedido, productos, repartidores, clientes, numero, setObjPedido }) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putPedido = () => {\r\n\r\n        let nuevoPedido = { ...pedido };\r\n\r\n        nuevoPedido.ped_est = !checked + \"\";\r\n        console.log(nuevoPedido.ped_est);\r\n\r\n        const endpoint = `${URL_BACKEND}/pedido/${pedido.id}`;\r\n        fetch(endpoint, {\r\n            method: 'PUT',\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(nuevoPedido)\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                console.log(data);\r\n                setChecked(!checked);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (pedido.ped_est === \"true\") {\r\n            setChecked(true);\r\n        }\r\n\r\n    }, []);\r\n\r\nconsole.log(pedido);\r\n    return (\r\n        <tr>\r\n            <td>{numero}</td>\r\n            <td>{pedido.id}</td>\r\n            <td>{\r\n                productos.map((prod, i) => {\r\n                    if (pedido.id_pro == prod.id) {\r\n\r\n                        return (prod.pro_nom)\r\n                    }\r\n                })\r\n            }</td>\r\n            {/* {\r\n                productos.map((prod, i) => {\r\n                    if (pedido.id_pro == i) {\r\n\r\n                        return (prod.pro_nom)\r\n                    }\r\n                })\r\n            } */}\r\n\r\n\r\n<td>{\r\n                repartidores.map((repa, i) => {\r\n                    if (pedido.id_rep == repa.id) {\r\n\r\n                        return (repa.rep_nom)\r\n                    }\r\n                })\r\n            }</td>\r\n            \r\n\r\n            <td >{\r\n                clientes.map((clie, i) => {\r\n                    if (pedido.id_cli == clie.id) {\r\n\r\n                        return (clie.cli_nom)\r\n                    }\r\n                })\r\n            }</td>\r\n            \r\n\r\n\r\n            <td>{pedido.ped_ini}</td>\r\n            <td>{pedido.ped_fin}</td>\r\n            <td>\r\n                {\r\n                    checked ?\r\n                        <span className=\"badge badge-success\">Habilitado</span> :\r\n                        <span className=\"badge badge-danger\">Inhabilitado</span>\r\n                }\r\n                <Switch\r\n                    checked={checked}\r\n                    onChange={putPedido} />\r\n\r\n            </td>\r\n            <td>{pedido.ped_fecha}</td>\r\n            <td>\r\n                <button className=\"btn btn-info\" onClick={() => {\r\n                    setObjPedido(pedido);\r\n                }}>\r\n                    Editar\r\n        </button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default PedidoFila\r\n","import React from 'react'\r\nimport PedidoFila from './PedidoFila'\r\nconst PedidoTabla = ({ pedidos,productos,repartidores,clientes, setObjPedido }) => {\r\n  \r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Producto</th>\r\n          <th>Repartidor</th>\r\n          <th>Cliente</th>\r\n          <th>Pedido Inicio</th>\r\n          <th>Pedido Fin</th>\r\n          <th>Estado</th>\r\n          <th>Pedido Fecha</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          pedidos.map((pedido, i) => {\r\n           \r\n\r\n            return <PedidoFila numero={i}\r\n            pedido={pedido}\r\n            productos={productos}\r\n            repartidores={repartidores}\r\n            clientes={clientes}\r\n            \r\n              key={pedido.id}\r\n              setObjPedido={setObjPedido} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default PedidoTabla\r\n","import { URL_BACKEND } from './../variables/variables';\r\n\r\n\r\nexport class RepartidorService {\r\n endpoint = \"/repartidor\";\r\n /**\r\n  * Funcion que trae toooooooodos los repartidores\r\n  */\r\n getAllRepartidores() {\r\n  return new Promise((resolve, reject) => {\r\n   fetch(`${URL_BACKEND}${this.endpoint}`)\r\n    .then((response) => {\r\n     response.json().then((repartidores) => {\r\n      resolve(repartidores);\r\n     })\r\n    })\r\n  })\r\n }\r\n\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ClienteService {\r\n endpoint = '/cliente';\r\n  async getAllClientes() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let clientes = await response.json();\r\n  // OJO, la funcion, por ser ASYNC, no retorna \r\n  // la lista de clientes, retorna una promesa\r\n  return clientes;\r\n   // .then((response) => {\r\n   //  response.json().then((clientes) => {\r\n   //   resolve(clientes);\r\n   //  })\r\n   // })\r\n }\r\n}","import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nexport class ProductoService {\r\n endpoint = \"/producto\";\r\n async getAllProductos() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let productos = await response.json();\r\n  return productos;\r\n }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { RepartidorService } from '../../../servicios/RepartidorService';\r\nimport { ClienteService } from '../../../servicios/ClienteService';\r\nimport { ProductoService } from '../../../servicios/ProductosService';\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst formularioVacio = {\r\n  id_pro: \"\",\r\n  id_rep: \"\",\r\n  id_cli: \"\",\r\n  ped_ini: \"\",\r\n  ped_fin: \"\",\r\n  ped_est: \"\",\r\n  ped_fecha: \"\"\r\n}\r\n\r\nconst PedidoForm = ({ getPedidos, objPedido, setObjPedido }) => {\r\n\r\n  const [formulario, setFormulario] = useState(formularioVacio);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n  const [clientes, setClientes] = useState([]);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  let repService = new RepartidorService();\r\n  let cliService = new ClienteService();\r\n  let prodService = new ProductoService();\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  const llenarSelects = async () => {\r\n\r\n    setRepartidores(await repService.getAllRepartidores());\r\n    setClientes(await cliService.getAllClientes());\r\n    setProductos(await prodService.getAllProductos());\r\n    \r\n    // let arrayRepartidores = await repService.getAllRepartidores();\r\n    // setRepartidores(arrayRepartidores);\r\n    // let arrayClientes = await cliService.getAllClientes();\r\n    // setClientes(arrayClientes);\r\n    // let arrayProductos = await prodService.getAllProductos()\r\n    // setProductos(arrayProductos);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    llenarSelects();\r\n\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  // let formVacio = {\r\n  //   id_pro: '',\r\n  //   id_rep: '',\r\n  //   id_cli: '',\r\n  //   ped_ini: '',\r\n  //   ped_fin: '',\r\n  //   ped_est: '',\r\n  //   ped_fecha: ''\r\n    \r\n\r\n  // };\r\n\r\n\r\n\r\n  // const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objPedido\");\r\n    if (objPedido) {\r\n      setFormulario(objPedido);\r\n    } else {\r\n      setFormulario(formularioVacio)\r\n    }\r\n  }, [objPedido])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  // const handleChange = (e) => {\r\n  //   setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n  // }\r\n\r\n  const postPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoPedido),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El pedido ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getPedidos();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un pedido en la BD\r\n  const putPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido/${objPedido.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoPedido)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getPedidos();\r\n        setObjPedido(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.id_pro.trim() === \"\" ||\r\n      formulario.id_rep.trim() === \"\" ||\r\n      formulario.id_cli.trim() === \"\" ||\r\n      formulario.ped_ini.trim() === \"\" ||\r\n      formulario.ped_fin.trim() === \"\" ||\r\n      formulario.ped_est.trim() === \"\" ||\r\n      formulario.ped_fecha.trim() === \"\" \r\n      ) {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objPedido) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL Pedido\");\r\n            putPedido(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postPedido(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h3 className=\"card-title\">Formulario de Pedidos</h3>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form className=\"row\" onSubmit={enviarFormulario}>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Producto</label>\r\n                <select name=\"id_pro\"\r\n                  onChange={handleChange} value={formulario.id_pro}\r\n                  id=\"\" className=\"form-control\">\r\n                    <option value=\"\">Seleccione</option>\r\n                  {\r\n                    productos.map((producto) => {\r\n                      return (<option value={producto.id} key={producto.id}>\r\n                        {producto.pro_nom} S/.{producto.pro_precio}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Repartidor</label>\r\n                <select name=\"id_rep\"\r\n                  onChange={handleChange} value={formulario.id_rep}\r\n                  id=\"\" className=\"form-control\">\r\n<option value=\"\">Seleccione</option>\r\n                  {\r\n                    repartidores.map((repartidor) => {\r\n                      return (<option value={repartidor.id} key={repartidor.id}>\r\n                        {repartidor.rep_nom} {repartidor.rep_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n\r\n\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Cliente</label>\r\n                <select name=\"id_cli\"\r\n                  onChange={handleChange}\r\n                  value={formulario.id_cli}\r\n                  id=\"\" className=\"form-control\">\r\n                    <option value=\"\">Seleccione</option>\r\n                  {\r\n                    clientes.map((cliente) => {\r\n                      return (<option value={cliente.id} key={cliente.id}>\r\n                        {cliente.cli_nom} {cliente.cli_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Inicio</label>\r\n                <input type=\"text\" name=\"ped_ini\"\r\n                  onChange={handleChange} value={formulario.ped_ini}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Fin</label>\r\n                <input type=\"text\" name=\"ped_fin\"\r\n                  onChange={handleChange} value={formulario.ped_fin}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Estado</label>\r\n                <select name=\"ped_est\" onChange={handleChange}\r\n                  id=\"\" className=\"form-control\" value={formulario.ped_est}>\r\n                  <option value=\"\">Seleccione</option>\r\n                  <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Fecha</label>\r\n                <input type=\"date\" name=\"ped_fecha\"\r\n                  onChange={handleChange} value={formulario.ped_fecha}\r\n                  className=\"form-control\" />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-6\">\r\n            {\r\n              objPedido ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Pedido\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Pedido\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </form>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PedidoForm\r\n","\r\nimport React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport PedidoTabla from './componentes/PedidoTabla';\r\n\r\nimport PedidoForm from './componentes/PedidoForm';\r\n\r\n\r\nimport { RepartidorService } from '../../servicios/RepartidorService';\r\nimport { ClienteService } from '../../servicios/ClienteService';\r\nimport { ProductoService } from '../../servicios/ProductosService';\r\n\r\nconst Pedidos = () => {\r\n\r\n    const endpoint = \"https://5ec9919a9ccbaf0016aa8f5d.mockapi.io/pedido\";\r\n    const [cargando, setCargando] = useState(true);//para cuando esperamos\r\n    const [pedidos, setPedidos] = useState([]);//nos traera el json de mockapi\r\n    const [objPedido, setObjPedido] = useState(null);//true cuando esta habilitado,false cuando no\r\n\r\n    const [repartidores2, setRepartidores] = useState([]);\r\n    const [clientes2, setClientes] = useState([]);\r\n    const [productos2, setProductos] = useState([]);\r\n\r\n\r\n\r\n          \r\n    let repService = new RepartidorService();\r\n    let cliService = new ClienteService();\r\n    let prodService = new ProductoService();\r\n\r\n\r\n    const getPedidos = () => {\r\n      if (!cargando) {\r\n        setCargando(true);\r\n      }\r\n  \r\n      fetch(endpoint).then((response) => {\r\n        response.json().then((data) => {\r\n          setCargando(false);\r\n          setPedidos(data);\r\n        })\r\n      })\r\n    }\r\n\r\n    const llenarSelects = async () => {\r\n  \r\n      setRepartidores(await repService.getAllRepartidores());\r\n      setClientes(await cliService.getAllClientes());\r\n      setProductos(await prodService.getAllProductos());\r\n    }\r\n\r\n    \r\n      useEffect(() => {\r\n        getPedidos();\r\n        llenarSelects();\r\n      }, [])\r\n\r\n\r\n\r\n     \r\n\r\n  \r\n  \r\n  \r\n     \r\n\r\n\r\n\r\n\r\n\r\n return (\r\n  <Fragment>\r\n      \r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n         <PedidoForm\r\n          getPedidos={getPedidos}\r\n          objPedido={objPedido}\r\n          setObjPedido={setObjPedido}\r\n        />\r\n      </div>\r\n    </div>\r\n   \r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n        {\r\n          cargando === true ?\r\n            <Cargando tipo=\"info\" texto=\"Cargando pedidos\" /> :\r\n            <PedidoTabla\r\n            pedidos={pedidos}\r\n            productos={productos2}\r\n            repartidores={repartidores2}\r\n            clientes={clientes2}\r\n            \r\n              setObjPedido={setObjPedido}\r\n            />\r\n        }\r\n      </div>\r\n    </div>\r\n\r\n  </Fragment>\r\n )\r\n}\r\n\r\nexport default Pedidos\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n//reparidores=cada vuelta del arreglo que viene de la api osea esto se ara por cada json dentro del arreglo\r\n//recordemos que este tiene un atributo estado que es un boleano pero nunca se le pone un valor en la pagina\r\n//sino que lo usaremos como referencia para poder modificarlo\r\nconst RepartidorFila = ({ repartidor, numero, setObjRepartidor }) => {\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // funcion que se conecta a la BD y cambia el estado del repartidor\r\n  const putRepartidor = () => {\r\n\r\n    let nuevoRepartidor = { ...repartidor };\r\n    // Al nuevo repartidor le colocamos el estado contrario\r\n    // al que tiene en el componente actualmente,\r\n    // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n    // rep_est => mandamos la negacion del estado actual\r\n    // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n    // contemplando\r\n    nuevoRepartidor.rep_est = !checked + \"\";\r\n    console.log(nuevoRepartidor.rep_est);\r\n\r\n    const endpoint = `${URL_BACKEND}/repartidor/${repartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        console.log(data);\r\n\r\n        // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n        // ESTADO EN LA BD\r\n        // En consecuencia, ya podemos hacer el cambio de estao local\r\n        // lo que generará un cambio visual para que el usuario\r\n        // vea el DOM actualizado.\r\n        setChecked(!checked);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (repartidor.rep_est === \"true\") {\r\n      setChecked(true);\r\n    }\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <tr>\r\n      <td>{numero}</td>\r\n      <td>{repartidor.id}</td>\r\n      <td>{repartidor.rep_nom}</td>\r\n      <td>{repartidor.rep_ape}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putRepartidor} />\r\n\r\n      </td>\r\n      <td>{repartidor.rep_dni}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjRepartidor(repartidor);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default RepartidorFila\r\n","import React from 'react'\r\nimport RepartidorFila from './RepartidorFila'\r\n//                    ARREGLO DE JSON DE LA API   ,   ARREGLO DE MODIFICACIONES QUE ENVIAREMOS\r\nconst RepartidoresTabla = ({ repartidores, setObjRepartidor }) => {\r\n  return (\r\n    <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          repartidores.map((repartidor, i) => {\r\n            return <RepartidorFila numero={i}\r\n              repartidor={repartidor}\r\n              key={repartidor.id}\r\n              setObjRepartidor={setObjRepartidor} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default RepartidoresTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst RepartidorFormV2 = ({ getRepartidores, objRepartidor, setObjRepartidor }) => {\r\n\r\n  let formVacio = {\r\n    rep_nom: '',\r\n    rep_ape: '',\r\n    rep_est: '',\r\n    rep_dni: ''\r\n  };\r\n\r\n\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"efecto objRepartidor\");\r\n    if (objRepartidor) {\r\n      setFormulario(objRepartidor);\r\n    } else {\r\n      setFormulario(formVacio)\r\n    }\r\n  }, [objRepartidor])\r\n\r\n  console.log(\"state form\", formulario);\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const postRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor`;\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(nuevoRepartidor),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: 'Éxito!',\r\n          icon: 'success',\r\n          text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n          timer: 2000,\r\n        });\r\n        getRepartidores();\r\n      })\r\n    })\r\n  }\r\n  // Funcion que actualiza un repartidor en la BD\r\n  const putRepartidor = (nuevoRepartidor) => {\r\n    const endpoint = `${URL_BACKEND}/repartidor/${objRepartidor.id}`;\r\n    fetch(endpoint, {\r\n      method: 'PUT',\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify(nuevoRepartidor)\r\n    }).then((response) => {\r\n      response.json().then((data) => {\r\n        Swal.fire({\r\n          title: \"Actualizado!\",\r\n          text: \"Registro actualizado correctamente\",\r\n          icon: \"success\",\r\n          timer: 1500\r\n        });\r\n        // limpiar el form\r\n        getRepartidores();\r\n        setObjRepartidor(null);\r\n      })\r\n    })\r\n  }\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (formulario.rep_nom.trim() === \"\" ||\r\n      formulario.rep_ape.trim() === \"\" ||\r\n      formulario.rep_dni.trim() === \"\" ||\r\n      formulario.rep_est.trim() === \"\") {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Cuidado!\",\r\n        text: \"Todos los campos deben estar llenos\"\r\n      });\r\n    } else {\r\n      if (objRepartidor) {\r\n        // tengo editar el registro\r\n        // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n        Swal.fire({\r\n          title: '¿Seguro que desea editar el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n            putRepartidor(formulario);\r\n          }\r\n        })\r\n      } else {\r\n        // tengo crear el registro\r\n        Swal.fire({\r\n          title: '¿Seguro que desea crear el registro?',\r\n          icon: 'info',\r\n          text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n          showCancelButton: true\r\n        }).then((result) => {\r\n          if (result.value) {\r\n            console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n            // stuff PARA CREAR AL USUARIO\r\n            // aqui hacemos un POST  a mockapi\r\n            postRepartidor(formulario);\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        <h3 className=\"card-title\">Registrar Repartidor</h3>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <form className=\"row\" onSubmit={enviarFormulario}>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Nombre:</label>\r\n            <input type=\"text\" name=\"rep_nom\"\r\n              className=\"form-control\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_nom} />\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Apellido:</label>\r\n            <input type=\"text\" name=\"rep_ape\"\r\n              className=\"form-control\" onChange={handleChange}\r\n              value={formulario.rep_ape} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Estado:</label>\r\n            <select className=\"form-control\" name=\"rep_est\"\r\n              onChange={handleChange}\r\n              value={formulario.rep_est}>\r\n              <option value=\"\">-Seleccione-</option>\r\n              <option value=\"true\">Habilitado</option>\r\n              <option value=\"false\">Inhabilitado</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group col-md-3\">\r\n            <label htmlFor=\"\">Dni:</label>\r\n            <input type=\"text\" name=\"rep_dni\"\r\n              className=\"form-control\"\r\n              value={formulario.rep_dni}\r\n              onChange={handleChange} />\r\n\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            {\r\n              objRepartidor ?\r\n                <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                  Actualizar Repartidor\r\n                </button> :\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                  Crear Repartidor\r\n                </button>\r\n            }\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n              Cancelar\r\n      </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RepartidorFormV2\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport RepartidoresTabla from './componentes/RepartidoresTabla';\r\n// import RepartidorForm from './componentes/RepartidorForm';\r\nimport RepartidorFormV2 from './componentes/RepartidorFormV2';\r\n// import RepartidorFormV3 from './componentes/RepartidorFormV3';\r\nconst Repartidores = () => {\r\n//   https://5ec86440155c130016a909c5.mockapi.io\r\n  const endpoint = \"https://5ec9919a9ccbaf0016aa8f5d.mockapi.io/repartidor\";\r\n  const [cargando, setCargando] = useState(true);\r\n  const [repartidores, setRepartidores] = useState([]);\r\n\r\n  // objRepartidor es una variable de estado, la cual va a contener \r\n  // un objeto de tipo repartidor sí y sólo si, queremos editar \r\n  // a un repartidor, en caso contrario su valor será null\r\n  const [objRepartidor, setObjRepartidor] = useState(null);\r\n\r\n  const getRepartidores = () => {\r\n    if (!cargando) {\r\n      setCargando(true);\r\n    }\r\n\r\n    fetch(endpoint).then((response) => {\r\n      response.json().then((data) => {\r\n        setCargando(false);\r\n        setRepartidores(data);\r\n      })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRepartidores();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {/* <RepartidorForm\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          /> */}\r\n          <RepartidorFormV2\r\n            getRepartidores={getRepartidores}\r\n            objRepartidor={objRepartidor}\r\n            setObjRepartidor={setObjRepartidor}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          {\r\n            cargando === true ?\r\n              <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n              <RepartidoresTabla\r\n                repartidores={repartidores}\r\n                setObjRepartidor={setObjRepartidor}\r\n              />\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Repartidores\r\n","import React, { useState, useEffect } from 'react'\r\nimport Switch from 'react-switch';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\nconst ProductoFila = ({ producto, numero, setObjProducto }) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    // funcion que se conecta a la BD y cambia el estado del producto\r\n    const putProducto = () => {\r\n  \r\n      let nuevoProducto = { ...producto };\r\n      // Al nuevo producto le colocamos el estado contrario\r\n      // al que tiene en el componente actualmente,\r\n      // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n      // pro_est => mandamos la negacion del estado actual\r\n      // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n      // contemplando\r\n      nuevoProducto.pro_est = !checked + \"\";\r\n      console.log(nuevoProducto.pro_est);\r\n  \r\n      const endpoint = `${URL_BACKEND}/producto/${producto.id}`;\r\n      fetch(endpoint, {\r\n        method: 'PUT',\r\n        headers: {\r\n          \"Content-type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(nuevoProducto)\r\n      }).then((response) => {\r\n        response.json().then((data) => {\r\n          console.log(data);\r\n  \r\n          // AQUI NOS ASEGURAMOS DE QUE EL producto, HA CAMBIADO SU \r\n          // ESTADO EN LA BD\r\n          // En consecuencia, ya podemos hacer el cambio de estao local\r\n          // lo que generará un cambio visual para que el usuario\r\n          // vea el DOM actualizado.\r\n          setChecked(!checked);\r\n        })\r\n      })\r\n    }\r\n  \r\n  \r\n    useEffect(() => {\r\n      if (producto.pro_est === \"true\") {\r\n        setChecked(true);\r\n      }\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <tr>\r\n      <td>{numero}</td>\r\n      <td>{producto.id}</td>\r\n      <td>{producto.pro_nom}</td>\r\n      <td>{producto.pro_precio}</td>\r\n      <td>\r\n        {\r\n          checked ?\r\n            <span className=\"badge badge-success\">Habilitado</span> :\r\n            <span className=\"badge badge-danger\">Inhabilitado</span>\r\n        }\r\n        <Switch\r\n          checked={checked}\r\n          onChange={putProducto} />\r\n\r\n      </td>\r\n      <td>{producto.pro_img}</td>\r\n      <td>\r\n        <button className=\"btn btn-info\" onClick={() => {\r\n          setObjProducto(producto);\r\n        }}>\r\n          Editar\r\n        </button>\r\n      </td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default ProductoFila\r\n","import React from 'react'\r\nimport ProductoFila from './ProductoFila'\r\n//                    ARREGLO DE JSON DE LA API   ,   ARREGLO DE MODIFICACIONES QUE ENVIAREMOS\r\nconst ProductoTabla = ({ productos, setObjProducto }) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th><strong>#</strong></th>\r\n            <th>Id</th>\r\n            <th>Nombre</th>\r\n            <th>Precio</th>\r\n            <th>Estado</th>\r\n            <th>Imagen</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            productos.map((producto, i) => {\r\n              return <ProductoFila numero={i}\r\n              producto={producto}\r\n                key={producto.id}\r\n                setObjProducto={setObjProducto} />\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    )\r\n}\r\n\r\nexport default ProductoTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport { URL_BACKEND } from '../../../variables/variables';\r\n\r\nconst ProductoForm = ({ getProductos, objProducto, setObjProducto }) => {\r\n\r\n\r\n    let formVacio = {\r\n        pro_nom: '',\r\n        pro_precio: '',\r\n        pro_est: '',\r\n        pro_img: ''\r\n      };\r\n    \r\n    \r\n    \r\n      const [formulario, setFormulario] = useState({});\r\n    \r\n      useEffect(() => {\r\n        console.log(\"efecto objProducto\");\r\n        if (objProducto) {\r\n          setFormulario(objProducto);\r\n        } else {\r\n          setFormulario(formVacio)\r\n        }\r\n      }, [objProducto])\r\n    \r\n      console.log(\"state form\", formulario);\r\n    \r\n    \r\n    \r\n      const handleChange = (e) => {\r\n        setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n      }\r\n    \r\n      const postProducto = (nuevoProducto) => {\r\n        const endpoint = `${URL_BACKEND}/producto`;\r\n        fetch(endpoint, {\r\n          method: 'POST',\r\n          body: JSON.stringify(nuevoProducto),\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          }\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: 'Éxito!',\r\n              icon: 'success',\r\n              text: 'El Producto ha sido creado con éxito en la base de datos',\r\n              timer: 2000,\r\n            });\r\n            getProductos();\r\n          })\r\n        })\r\n      }\r\n      // Funcion que actualiza un producto en la BD\r\n      const putProducto = (nuevoProducto) => {\r\n        const endpoint = `${URL_BACKEND}/producto/${objProducto.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(nuevoProducto)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            Swal.fire({\r\n              title: \"Actualizado!\",\r\n              text: \"Registro actualizado correctamente\",\r\n              icon: \"success\",\r\n              timer: 1500\r\n            });\r\n            // limpiar el form\r\n            getProductos();\r\n            setObjProducto(null);\r\n          })\r\n        })\r\n      }\r\n      const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n    \r\n        if (formulario.pro_nom.trim() === \"\" ||\r\n          formulario.pro_precio.trim() === \"\" ||\r\n          formulario.pro_img.trim() === \"\" ||\r\n          formulario.pro_est.trim() === \"\") {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Cuidado!\",\r\n            text: \"Todos los campos deben estar llenos\"\r\n          });\r\n        } else {\r\n          if (objProducto) {\r\n            // tengo editar el registro\r\n            // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n            Swal.fire({\r\n              title: '¿Seguro que desea editar el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS EDITAR AL Producto\");\r\n                putProducto(formulario);\r\n              }\r\n            })\r\n          } else {\r\n            // tengo crear el registro\r\n            Swal.fire({\r\n              title: '¿Seguro que desea crear el registro?',\r\n              icon: 'info',\r\n              text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n              showCancelButton: true\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                // stuff PARA CREAR AL USUARIO\r\n                // aqui hacemos un POST  a mockapi\r\n                postProducto(formulario);\r\n              }\r\n            })\r\n          }\r\n        }\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <h3 className=\"card-title\">Registrar Producto</h3>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <form className=\"row\" onSubmit={enviarFormulario}>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Nombre:</label>\r\n              <input type=\"text\" name=\"pro_nom\"\r\n                className=\"form-control\"\r\n                onChange={handleChange}\r\n                value={formulario.pro_nom} />\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Precio:</label>\r\n              <input type=\"text\" name=\"pro_precio\"\r\n                className=\"form-control\" onChange={handleChange}\r\n                value={formulario.pro_precio} />\r\n  \r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Estado:</label>\r\n              <select className=\"form-control\" name=\"pro_est\"\r\n                onChange={handleChange}\r\n                value={formulario.pro_est}>\r\n                <option value=\"\">-Seleccione-</option>\r\n                <option value=\"true\">Habilitado</option>\r\n                <option value=\"false\">Inhabilitado</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group col-md-3\">\r\n              <label htmlFor=\"\">Imagen:</label>\r\n              <input type=\"text\" name=\"pro_img\"\r\n                className=\"form-control\"\r\n                value={formulario.pro_img}\r\n                onChange={handleChange} />\r\n  \r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              {\r\n                objProducto ?\r\n                  <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                    Actualizar Producto\r\n                  </button> :\r\n                  <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                    Crear Producto\r\n                  </button>\r\n              }\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              <button className=\"btn btn-danger btn-block\" type=\"button\">\r\n                Cancelar\r\n        </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProductoForm\r\n","\r\nimport React, { useState, useEffect, Fragment } from 'react'\r\nimport Cargando from './../../componentes/Cargando';\r\nimport ProductoTabla from './componentes/ProductoTabla';\r\n\r\nimport ProductoForm from './componentes/ProductoForm';\r\n\r\n\r\nconst Productos = () => {\r\n\r\n    const endpoint = \"https://5ec9919a9ccbaf0016aa8f5d.mockapi.io/producto\";\r\n    const [cargando, setCargando] = useState(true);//para cuando esperamos\r\n    const [productos, setProductos] = useState([]);//nos traera el json de mockapi\r\n    const [objProductos, setObjProductos] = useState(null);//true cuando esta habilitado,false cuando no\r\n\r\n\r\n    const getProductos = () => {\r\n\r\n        if (!cargando) {\r\n          setCargando(true);\r\n        }\r\n    \r\n        fetch(endpoint).then((response) => {\r\n          response.json().then((data) => {\r\n            setCargando(false);\r\n            setProductos(data);\r\n          })\r\n        })\r\n      }\r\n    \r\n      useEffect(() => {\r\n        getProductos();\r\n      }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n return (\r\n    <Fragment>\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n         <ProductoForm\r\n          getProductos={getProductos}\r\n          objProductos={objProductos}\r\n          setObjProductos={setObjProductos}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"row justify-content-center\">\r\n      <div className=\"col-md-8\">\r\n        {\r\n          cargando === true ?\r\n            <Cargando tipo=\"info\" texto=\"Cargando productos\" /> :\r\n            <ProductoTabla\r\n            productos={productos}\r\n              setObjProductos={setObjProductos}\r\n            />\r\n        }\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n )\r\n}\r\n\r\nexport default Productos\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n return (\r\n  <div>\r\n   Home\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n return (\r\n  <header>\r\n   <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n    <a className=\"navbar-brand\" href=\"!#\">Pedidos</a>\r\n    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n     aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n     <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item active\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n       <Link to={\"/clientes\"} className=\"nav-link\">Clientes</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/productos\"} className=\"nav-link\">Productos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/pedidos\"} className=\"nav-link\">Pedidos</Link>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n       {/* <a className=\"nav-link\" href=\"!#\">Link</a> */}\r\n       <Link to={\"/repartidores\"} className=\"nav-link\">Repartidores</Link>\r\n      </li>\r\n     </ul>\r\n    </div>\r\n   </nav>\r\n  </header>\r\n )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport {\r\n  Route,\r\n  BrowserRouter as Router,\r\n  Switch\r\n} from 'react-router-dom';\r\n\r\nimport Clientes from './paginas/clientes/Clientes';\r\nimport Pedidos from './paginas/pedidos/Pedidos';\r\nimport Repartidores from './paginas/repartidores/Repartidores';\r\nimport Productos from './paginas/productos/Productos';\r\nimport Home from './paginas/home/Home';\r\nimport Header from './componentes/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n\r\n      <Header />\r\n\r\n      <main className=\"container-fluid pt-3\">\r\n        <Switch>\r\n          <Route path={\"/clientes\"} component={Clientes} />\r\n          <Route path={\"/pedidos\"} component={Pedidos} />\r\n          <Route path={\"/repartidores\"} component={Repartidores} />\r\n          <Route path={\"/productos\"} component={Productos} />\r\n          <Route path={\"/\"} component={Home} />\r\n        </Switch>\r\n      </main>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}